function [trials,totaltrls] = AddLOGData(file)

count = 0;
fid = fopen(file, 'r');
eof=0; newline = 'nothingnew'; count=0;
% newline has to be up to 10 chars, because of a short word in the file early on
%% get subject name
remain = pwd; % current folder path
while ~isempty(remain)
[subj_name,remain] = strtok(remain,'\');
end

%% check if this data was generated by replaying the stimulus movie
% if strcmp(file(1:6),'replay'), replay_movie = true;
% else, replay_movie = false; end
%% check for fixed ground landmark
% while ~strcmp(newline(1:9),'Enable Li')
%     newline = fgetl(fid);
% end
% fixed_ground = logical(1 - str2double(newline(18))); % if limited lifetime is enabled (1), fixed_ground is 0
%% Get firefly ON duration
% while ~strcmp(newline(1:10),'Firefly ON')
%     newline = fgetl(fid);
% end
% if strcmp(newline(1:10),'Firefly ON')
%     firefly_ONduration = str2num(newline(end));
% end
%% Get Eye offset and scale info
while ~strcmp(newline(1:10),'Interocula') 
    newline = fgetl(fid);
end
if strcmp(newline(1:11),'Interocular')
    eye_dist = str2num(newline(23:end));
    newline = fgetl(fid);
end
% Left Eye
if strcmp(newline(1:16),'LeftEye Offset X')
    yle_offset = str2num(newline(19:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:15),'LeftEye Scale X')
    yle_scale = str2num(newline(18:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:16),'LeftEye Offset Y')
    zle_offset = str2num(newline(19:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:15),'LeftEye Scale Y')
    zle_scale = str2num(newline(18:end));
    newline = fgetl(fid);
end
% Right Eye
if strcmp(newline(1:17),'RightEye Offset X')
    yre_offset = str2num(newline(20:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:16),'RightEye Scale X')
    yre_scale = str2num(newline(19:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:17),'RightEye Offset Y')
    zre_offset = str2num(newline(20:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:16),'RightEye Scale Y')
    zre_scale = str2num(newline(19:end));
    newline = fgetl(fid);
end
%% Get head, eye and screen distance info
if strcmp(newline(1:16),'Monkey to Screen')
    screen_dist = str2num(newline(24:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:13),'Head Center X')
    headX = str2num(newline(21:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:13),'Head Center Y')
    headY = str2num(newline(21:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:13),'Head Center Z')
    headZ = str2num(newline(21:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:12),'Eye Offset X')
    eyeX = str2num(newline(20:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:12),'Eye Offset Y')
    eyeY = str2num(newline(20:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:12),'Eye Offset Z')
    eyeZ = str2num(newline(20:end));
    newline = fgetl(fid);
end

%% Get firefly range info
while ~strcmp(newline(1:10),'Firefly Ra') % not firefly radius
    newline = fgetl(fid);
end
while ~strcmp(newline(1:13),'Firefly Range')
    newline = fgetl(fid);
end
if strcmp(newline(1:20),'Firefly Range Radius')
    ff_dist_range = str2num(newline(28:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:20),'Firefly Range Angle ')
    ff_ang_range = str2num(newline(28:end));
    newline = fgetl(fid);
end
%% Get Tau dynamics info
while ~strcmp(newline(1:8),'Discrete')
    newline = fgetl(fid);
end
while ~strcmp(newline(1:14),'Discrete(0) or'); newline = fgetl(fid); end
if strcmp(newline(1:14),'Discrete(0) or')
    tau_dyn_temp = str2num(newline(31:end));
    if tau_dyn_temp
        tau_dynamics = 'continuous';
    else
        tau_dynamics = 'discrete';
    end
    newline = fgetl(fid);
end
if strcmp(newline(1:11),'Trial(0) or')
    timestep_temp = str2num(newline(22:end));
    if timestep_temp
        timestep = 'time';
    else
        timestep = 'trial';
    end
    newline = fgetl(fid);
end
if strcmp(newline(1:7),'Tau Tau')
    tau_tau = str2num(newline(10:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:17),'Mean Firefly Dist')
    x = str2num(newline(26:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:14),'Mean Trial Dur')
    T = str2num(newline(24:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:15),'Gain of Max Ang')
    gain_wmax = str2num(newline(27:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:14),'Number of Taus')
    if strcmp(tau_dynamics,'discrete')
        num_taus = str2num(newline(32:end));
    else
        num_taus = [];
    end
    newline = fgetl(fid);
end
if strcmp(newline(1:6),'MinTau')
    min_tau = str2num(newline(9:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:6),'MaxTau')
    max_tau = str2num(newline(9:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:5),'Gamma')
    gamma = str2num(newline(8:end)); % check what gamma actually is
    newline = fgetl(fid);
end
if strcmp(tau_dynamics,'continuous')
    if strcmp(newline(1:5),'MuPhi')
        mu_phi = str2num(newline(8:end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:8),'SigmaPhi')
        sig_phi = str2num(newline(11:end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:5),'MuEta')
        mu_eta = str2num(newline(8:end));
        newline = fgetl(fid);
    end
    
    if strcmp(newline(1:8),'SigmaEta')
        sig_eta = str2num(newline(11:end));
        newline = fgetl(fid);
    end
else
    mu_phi = [];
    sig_phi = [];
    mu_eta = [];
    sig_eta = [];
    while ~strcmp(newline(1:10),'Trial Num#'); newline = fgetl(fid); end
end
while newline ~= -1
    %% get ground plane density, firefly position, stimulus type, vmax, wmax, tau
    while ~strcmp(newline(1:10),{'Trial Num#','Floor Dens','Firefly Po','Stim Type:','Joy Stick '})
        newline = fgetl(fid);
        if newline == -1, break; end
    end
    if newline == -1, break; end
    count = count+1;
    if strcmp(newline(1:10),'Trial Num#')
        totaltrls = str2num(newline(12:end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Floor Dens')
        floordensity = str2num(newline(27:end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Firefly Po')
        indx_space = strfind(newline,' ');
        %         numspaces = length(indx_space);
        trials(count).prs.fireflyposx = -str2num(newline(indx_space(4):indx_space(5)));
        trials(count).prs.fireflyposy = -str2num(newline(indx_space(5):end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Stim Type:')
        trials(count).prs.stimtype = str2num(newline(12));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Joy Stick ')
        if strcmp(newline(1:13),'Joy Stick Tau')
            tau = str2num(newline(16:end));
            newline = fgetl(fid);
        end
        if strcmp(newline(1:14),'Joy Stick Coef')
            jscoef = str2num(newline(24:end));
            newline = fgetl(fid);
        end
        if strcmp(newline(1:17),'Joy Stick Max Vel')
            vmax = str2num(newline(32:end));
            newline = fgetl(fid);
        end
        if strcmp(newline(1:17),'Joy Stick Max Ang')
            wmax = str2num(newline(41:end));
            newline = fgetl(fid);
        end
    end
    %     trials(count).prs.firefly_ONduration = firefly_ONduration;
    trials(count).prs.eye_dist = eye_dist;
    trials(count).prs.yle_offset = yle_offset;  trials(count).prs.yle_scale = yle_scale;
    trials(count).prs.yre_offset = yre_offset;  trials(count).prs.yre_scale = yre_scale;
    trials(count).prs.zle_offset = zle_offset;  trials(count).prs.zle_scale = zle_scale;
    trials(count).prs.zre_offset = zre_offset;  trials(count).prs.zre_scale = zre_scale;
    
    trials(count).prs.screen_dist = screen_dist;
    trials(count).prs.headX = headX;
    trials(count).prs.headY = headY;
    trials(count).prs.headZ = headZ;
    trials(count).prs.eyeX = eyeX;
    trials(count).prs.eyeY = eyeY;
    trials(count).prs.eyeZ = eyeZ;

    trials(count).prs.floordensity = floordensity;
    trials(count).prs.ff_dist_range = ff_dist_range;
    trials(count).prs.ff_ang_range = ff_ang_range;
    
    trials(count).prs.tau = tau;
    trials(count).prs.js_coef = jscoef;
    trials(count).prs.vmax = vmax;
    trials(count).prs.wmax = wmax;
    trials(count).prs.x = x;
    trials(count).prs.T = T;
    trials(count).prs.gain_wmax = gain_wmax;

    trials(count).prs.tau_dynamics = tau_dynamics;
    trials(count).prs.num_taus = num_taus;
    trials(count).prs.timestep = timestep;
    trials(count).prs.tau_tau = tau_tau;
    trials(count).prs.gamma = gamma;
    trials(count).prs.min_tau = min_tau;
    trials(count).prs.max_tau = max_tau;
    trials(count).prs.mu_phi = mu_phi;
    trials(count).prs.sig_phi = sig_phi;
    trials(count).prs.mu_eta = mu_eta;
    trials(count).prs.sig_eta = sig_eta;
    
    % give subject name
    if ~isempty(subj_name)
        trials(count).prs.subject = [subj_name];
    else
        disp(['Subject name not obtained, check current folder name and AddTrials2Behaviour.m']);
    end

    if newline == -1, break; end
    % initialise
    %     trials(count).logical.landmark_distance = false;
    %     trials(count).logical.landmark_angle = false; % #$%^&&^&*^danger - change false to nan immediately (what if field missing from log file??)
    %     trials(count).logical.landmark_fixedground = fixed_ground;
    %     trials(count).prs.ptb_linear = 0;
    %     trials(count).prs.ptb_angular = 0;
    %     trials(count).prs.ptb_delay = 0;
    %     trials(count).prs.intertrial_interval = nan;
    %     trials(count).logical.firefly_fullON = nan;
    %     trials(count).prs.stop_duration = nan;
    %     trials(count).logical.replay = replay_movie;
    %% get landmark status, ptb velocities and ptb delay
    %     newline = fgetl(fid);
    %     if newline == -1, break; end
    %     if strcmp(newline(1:9),'Enable Di')
    %         trials(count).logical.landmark_distance = str2num(newline(26)); % 1=distance landmark was ON
    %         newline = fgetl(fid);
    %         trials(count).logical.landmark_angle = str2num(newline(25)); % 1=angular landmark was ON
    %         newline = fgetl(fid);
    %         trials(count).prs.ptb_linear = str2num(newline(35:end)); % amplitude of linear velocity ptb (cm/s)
    %         newline = fgetl(fid);
    %         trials(count).prs.ptb_angular = str2num(newline(37:end)); % amplitude of angular velocity ptb (deg/s)
    %         newline = fgetl(fid);
    %         trials(count).prs.ptb_delay = str2num(newline(31:end)); % time after trial onset at which to begin ptb
    %         newline = fgetl(fid);
    %     end
    %% get inter-trial interval and firefly status
    %     if newline == -1, break; end
    %     if strcmp(newline(1:10),'Firefly ON')
    %         trials(count).prs.intertrial_interval = str2num(newline(27:end)); % time between end of this trial and beg of next trial (s)
    %         newline = fgetl(fid);
    %         trials(count).logical.firefly_fullON = str2num(newline(18)); % 1=firefly was ON throughout the trial
    %         newline = fgetl(fid);
    %     end
    %% get stopping duration for reward
    %     if newline == -1, break; end
    %     if strcmp(newline(1:8),'Distance')
    %         trials(count).prs.stop_duration = str2num(newline(34:end))/1000; % wait duration after stopping before monkey is given feedback (s)
    %     end
end

